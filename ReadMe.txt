1. В качестве СУБД использована Sqlite. Бекап БД прикладывать не имеет смысла, т.к. БД создается автоматически при первом запуске приложения (путь к БД: %AppData%\CompanyManagement\).

2. Из сторонних пакетов использованы Newtonsoft.Json, Npgsql.EntityFrameworkCore.PostgreSQL (для работы с СУБД PostgreSQL) и те, что предназначены для работы Swagger'а (Swashbuckle.<...>). Остальные пакеты сложно назвать сторонними.

3. В трехуровневую архитектуру проекта для удобства и более грамотной функциональности добавлены уровни: Tests (вспомогательный) и Infrastructure (самый "нижний").

3.1. Уровень App.
    Проект Main - основная часть приложения, где расположена точка входа в приложения - Program, а так же Контроллеры (CompanyController, ContactController, CommunicationController), каждый из которых работает с соответствующей Моделью.
    Проект AppInitializer предназначен для инициализации приложения (в нашем случае - по сути только БД): метод Init класса Initializer вызывается из точки входа Program.
    
3.2. Уровень Domane (предметная область).
    На данном уровне расположена бизнес-логика, сосредоточенная в Моделях.
    Проект Models содержит Модели (CompanyModel, ContactModel, CommunicationModel), используемые Контроллерами из уровня App. Модели работают с соответствующими сущностями.
    
3.3. Уровень DataAccess (уровень доступа к данным).
    Проект DbContexts - контекст БД, посредством которого происходит работа EF Core. При сборке проекта в папке Scripts создаются скрипты для удобства работы с миграциями. Создаваемые миграции расположены в соответствующей папке проекта.
    Проект DbConfigureManagement - конфигурирует БД (класс DbConfigurator). Реализована стратегия выбора необходимого класса опций конкретного провайдера БД.
    Проект Entities - сущности предметной области, соответствующие таблицам БД: Company (компания), Contact (сотрудник компании), Communication (средство коммуникации).

3.4. Уровень Infrastructure (инфраструктура).
    Вспомогательный уровень - всевозможные вспомогательные классы и методы расширения.
    Подуровень AppComponents. AppExceptions - специфичные для приложения исключения. SwaggerComponents - атрибуты и фильтры для Swagger'а.
    Подуровень AspModule. Extensions - расширения для ASP (в нашем случае ControllerExtensions - расширение для Контроллеров). 
    Проекты BaseComponents, BaseExtensions, Phrases (практически в такой же форме) используются мной почти во всех разрабатываемых приложениях.

ПРИМЕЧАНИЯ:
1. Приложение выполнено в среде разработки JetBrains Rider. Использовался net 7.0 (core), c# 11.0.

2. Помимо требований ТЗ реализовано грамотное обновление полей Contact.IsDecisionMaker, Communication.ContactId, если при добавлении/обновлении сущности Company установлено свойство DecisionMakerId.

3. Из дополнительных требований реализованы первый и второй пункты.
По первому пункту: не удалось смоделировать отсутствие связи с таблицей Contact при удалении Средства коммуникации по ContactId (СУБД грамотно отрабатывает и не позволяет таких ситуаций).

4. Существует мнение, что сущности должны располагаться в отдельном, более "низком" уровне.

5. К сожалению, тестовое задание составлено не очень четко, и содержит неточности, которые описаны сносками в исходном DOCX-файле.